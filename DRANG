module DRANG(
input                   clk_main    ,
input                   rst_n       ,

input                   start       ,
input       [5  :0]     dat_num     ï¼Œ
input       [127:0]     in_dat      ,

output reg              out_vld     ,
output reg  [127:0]     out_dat    
);


function  [6:0]  one_num_cal;
    input   [36:0]  one_sequence;
    input   [6 :0]  boundry;
    
    reg     [36:0]  vld_one_sequence;
    integer         i;
    
    begin
        vld_one_sequence = one_sequence >> boundry;
        one_num_cal = 6'd0;
        for (i = 0 ; i < 37; i = i + 1) begin
            one_num_cal = one_num_cal + vld_one_sequence[i];
        end 
    end 

endfunction

localparam  IDLE   = 1'b0;
localparam  DAT_RD = 1'b1;

reg [0 :0]  cur_state               ;
reg [0 :0]  nxt_state               ;

reg [36:0]  sequence_arr     [0:3]  ;
reg         sequence_wen            ;
reg [36:0]  sequence_arr_wen [0:3]  ;
reg [5 :0]  boundry          [0:3]  ;

reg [5 :0]  order_arr        [0:36] ;
reg [5 :0]  order_arr_wr_num        ;
reg [5 :0]  order_arr_insert_idx_pre; 
reg [5 :0]  order_arr_insert_idx    ;
reg [5 :0]  order_arr_pre_dat_num   ;
reg [5 :0]  order_arr_pre_dat_num_nxt;
reg [5 :0]  order_arr_raddr         ;

reg [39:0]  dat_arr_vld             ;
reg [39:0]  dat_arr_1st_zero_idx    ;

reg [5 :0]  in_dat_cnt              ;
reg         in_dat_vld_pre          ;
reg         in_dat_vld              ;
reg         in_dat_done             ;
reg         in_dat_vld_len          ;
reg [7 :0]  in_dat_max_num          ;

wire[1 :0]  in_num                  ;
wire[5 :0]  grp_num                 ;

reg         ram_wen                 ;
reg [5 :0]  ram_waddr               ;
reg         ram_ren                 ;
reg [2 :0]  ram_ren_dly             ; 
reg [5 :0]  ram_raddr               ;
wire[127:0] ram_rdat                ;

reg [5:0]   dat_len_arr     [0:36]  ;
reg [5:0]   dat_len                 ;
reg [6:0]   dat_len_arr_waddr       ;
reg [6:0]   dat_len_arr_raddr       ;
reg         dat_len_arr_empty       ;
reg [5:0]   cur_dat_len             ;


reg         out_dat_rd              ;
reg         out_dat_done            ;
reg [5:0]   out_dat_cnt             ;

genvar i,j;

assign in_num  = in_dat[7:6];
assign grp_num = in_dat[5:0];

//*****************************************
//SEQUENCE ARRAY 
//*****************************************

always @ (*) begin
    if ({grp_num, in_num} == in_dat_max_num) begin
        sequence_wen = 1'b0;
    end 
    else begin
        if (ram_wen == 1'b1) begin
            sequence_wen = 1'b1;
        end 
        else begin 
            sequence_wen = 1'b0;
        end 
    end 
end 

generate
    for (i = 0 ; i < 4; i = i + 1) begin: SEQUENCE_ARR_WEN_GEN
        if (in_num == i) begin 
            sequence_arr_wen[i] = {36'd0, sequence_wen} << grp_num;
        end 
        else begin 
            sequence_arr_wen[i] = 37'd0;
        end 
    end 
endgenerate

generate
    for (i = 0; i < 4; i = i + 1) begin: SEQUENCE_ARR_I_GEN
        for (j = 0; j < 37; j = j + 1) begin: SEQUENCE_ARR_J_GEN
            always @ (posedge clk_main or negedge rst_n) begin
                if (rst_n == 1'b0) begin 
                    sequence_arr[i][j] <= 1'b0;
                end 
                else begin
                    if (in_dat_done == 1'b1) begin 
                        sequence_arr[i][j] <= 1'b0;
                    end 
                    else begin 
                        if (sequence_arr_wen[i][j] == 1'b1) begin
                            sequence_arr[i][j] <= 1'b1;
                        end 
                        else ;
                    end 
                end 
            end 
        end 
    end 
endgenerate

generate
    for (i = 0 ; i < 4; i = i + 1) begin: BOUNDARY_GEN
        always @ (*) begin
            if (i <= in_num) begin 
                boundry[i] = grp_num + 1'b1;
            end 
            else begin
                boundry[i] = grp_num;
            end 
        end 
    end 
endgenerate

//*****************************************
//DAT_ARR 
//*****************************************
generate
    for (genvar i = 0; i < 40; i = i + 1) begin: DAT_ARR_VLD_GEN
        always @ (posedge clk_main or negedge rst_n) begin
            if (rst_n == 1'b1) begin 
                dat_arr_vld[i] <= 1'b1;
            end 
            else begin 
                if (ram_wen == 1'b1 && ram_waddr == i) begin 
                    if (ram_ren == 1'b1 && ram_raddr == i) ;
                    else begin 
                        dat_arr_vld[i] <= 1'b1;
                    end 
                end 
                else begin 
                    if (ram_ren == 1'b1 && ram_raddr == i) begin 
                        dat_arr_vld[i] <= 1'b0;
                    end 
                    else ;
                end 
            end 
        end 
    end 
endgenerate

//********** calculate the least '0' idx***
Cal_1st_zero_idx(
    .sequence   ( dat_arr_vld           ),
    .zero_idx   ( dat_arr_1st_zero_idx  ),
    .zero_exist (                       )
);

//*****************************************
//ORDER_ARR
//*****************************************

always @ (*) begin
    order_arr_insert_idx_pre = (one_num_cal(sequence_arr[0], boundry[0]) + one_num_cal(sequence_arr[1], boundry[1])) +
                               (one_num_cal(sequence_arr[1], boundry[1]) + one_num_cal(sequence_arr[3], boundry[3]));
end 

always @ (*) begin
    if (order_arr_insert_idx_pre + order_arr_pre_dat_num > 6'd36) begin 
        order_arr_insert_idx = order_arr_insert_idx_pre + order_arr_pre_dat_num - 6'd37;
    end 
    else begin 
        order_arr_insert_idx = order_arr_insert_idx_pre + order_arr_pre_dat_num;
    end 
end 

always @ (*) begin 
    if (order_arr_pre_dat_num + in_dat_vld_len > 6'd36) begin 
        order_arr_pre_dat_num_nxt = order_arr_pre_dat_num + in_dat_vld_len - 6'd37;
    end 
    else begin 
        order_arr_pre_dat_num_nxt = order_arr_pre_dat_num + in_dat_vld_len;
    end 
end 

always @ (posedge clk_main or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        order_arr_pre_dat_num <= 6'd0;
    end 
    else begin
        if (in_dat_done == 1'b1) begin 
            order_arr_pre_dat_num <= order_arr_pre_dat_num_nxt;
        end 
        else ;
    end 
end 

generate 
    for (i = 0; i < 37; i = i + 1) begin: ORDER_ARR_GEN
        if (i == 0) begin
            always @ (posedge clk_main or negedge rst_n) begin
                if (rst_n == 1'b0) begin
                    order_arr[i] <= 6'd0;
                end 
                else begin 
                    if (ram_wen == 1'b1) begin 
                        if (order_arr_pre_dat_num_nxt < order_arr_pre_dat_num) begin
                            if (order_arr_insert_idx >= order_arr_pre_dat_num) begin
                                order_arr[i] <= order_arr[36];
                            end 
                            else begin 
                                if (order_arr_insert_idx == i) begin 
                                    order_arr[i] <= dat_arr_1st_zero_idx;
                                end 
                                else ;
                            end 
                        end 
                        else begin 
                            if (order_arr_insert_idx == i) begin 
                                order_arr[i] <= dat_arr_1st_zero_idx;
                            end 
                            else ;  
                        end 
                    end 
                    else ;
                end 
            end 
        end
        else if (i == 36) begin
            always @ (posedge clk_main or negedge rst_n) begin
                if (rst_n == 1'b0) begin
                    order_arr[i] <= 6'd0;
                end 
                else begin
                    if (ram_wen == 1'b1) begin 
                        if (order_arr_pre_dat_num <= i && order_arr_pre_dat_num_nxt >= 0) begin
                            if (order_arr_insert_idx == i) begin
                                order_arr[i] <= dat_arr_1st_zero_idx;
                            end 
                            else begin 
                                if (order_arr_insert_idx < i) begin 
                                    order_arr[i] <= order_arr[i-1];
                                end 
                                else ;
                            end 
                        end 
                        else ;
                    end 
                    else ;
                end 
            end 
        end 
        else begin 
            always @ (posedge clk_main or negedge rst_n) begin 
                if (rst_n == 1'b0) begin 
                    order_arr[i] <= 6'd0;
                end 
                else begin 
                    if (ram_wen == 1'b1) begin 
                        if (order_arr_pre_dat_num < order_arr_pre_dat_num_nxt) begin 
                            if (order_arr_insert_idx < i) begin 
                                order_arr[i] <= order_arr[i-1];
                            end 
                            else begin 
                                if (order_arr_insert_idx == i) begin 
                                    order_arr[i] <= dat_arr_1st_zero_idx;
                                end 
                                else ;
                            end 
                        end 
                        else begin 
                            if (order_arr_pre_dat_num < order_arr_insert_idx && (i < order_arr_pre_dat_num_nxt || order_arr_insert_idx < i)) begin 
                                order_arr[i] <= order_arr[i-1];
                            end 
                            else begin 
                                if (order_arr_insert_idx < order_arr_pre_dat_num_nxt && (i < order_arr_pre_dat_num_nxt && order_arr_insert_idx < i)) begin 
                                    order_arr[i] <= order_arr[i-1];
                                end 
                                else ;
                            end 
                        end 
                    end 
                    else ;
                end 
            end 
        end 
    end
endgenerate    

always @ (posedge clk_main or negedge rst_n) begin 
    if (rst_n == 1'b0) begin 
        order_arr_raddr <= 6'd0;
    end 
    else begin 
        if (out_dat_rd == 1'b1) begin 
            if (order_arr_raddr == 6'd36) begin 
                order_arr_raddr <= 6'd0;
            end 
            else begin 
                order_arr_raddr <= order_arr_raddr + 1'b1;
            end 
        end 
        else ;
    end 
end 
//*****************************************
//IN_DAT
//*****************************************
always @ (*) begin
    if (in_dat_cnt == in_num) begin
        in_dat_done = 1'b1;
    end 
    else begin
        in_dat_done = 1'b0;
    end 
end 

always @ (posedge clk_main or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        in_dat_vld_pre <= 1'b1;
    end 
    else begin
        if (in_dat_done == 1'b1) begin
            in_dat_vld_pre <= 1'b0;
        end 
        else begin
            if (start == 1'b1) begin
                in_dat_vld_pre <= 1'b1;
            end 
            else ;
        end 
    end
end 

always @ (*) begin
    if (start == 1'b1 || in_dat_vld_pre == 1'b1) begin
        in_dat_vld = 1'b1;
    end 
    else begin
        in_dat_vld = 1'b0;
    end 
end    

always @ (posedge clk_main or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        in_dat_cnt <= 6'd0;
    end 
    else begin
        if (in_dat_done == 1'b1) begin
            in_dat_cnt <= 6'd0;
        end 
        else begin
            if (in_dat_vld == 1'b1) begin
                in_dat_cnt <= in_dat_cnt + 1'b1;
            end 
            else ;
        end 
    end 
end 

always @ (posedge clk_main or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        in_dat_vld_len <= 6'd0;
    end 
    else begin
        if (start == 1'b1) begin
            if ({in_num, grp_num} == in_dat_max_num && pre_dat_pack_num == 6'd0) begin
                in_dat_vld_len <= in_num;
            end 
            else begin
                in_dat_vld_len <= in_num + 1'b1;
            end 
        end 
        else begin 
            if ({in_num, grp_num} == in_dat_max_num && pre_dat_pack_num == 6'd0 && in_dat_vld == 1'b1) begin
                in_dat_vld_len <= in_dat_vld_len - 1'b1;
            end 
            else ;
        end 
    end 
end 

always @ (posedge clk_main or negedge rst_n) begin 
    if (rst_n == 1'b0) begin 
        in_dat_max_num <= 8'd0;
    end 
    else begin 
        if (start == 1'b1) begin 
            if ({in_num, grp_num} == {6'd36, 2'd3}) begin 
                in_dat_max_num <= {6'd36, 2'd2};
            end 
            else begin 
                in_dat_max_num <= {6'd36, 2'd3};
            end 
        end 
        else begin
            if (in_dat_vld == 1'b1 && {in_dat[5:0], in_dat[7:6]} == in_dat_max_num) begin 
                in_dat_max_num <= in_dat_max_num - 1'b1;
            end 
            else ;
        end 
    end 
end 

//*****************************************
//DAT_LEN_ARR
//*****************************************
always @ (posedge clk_main or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        dat_len_arr_waddr[6:0] <= 7'd0;
    end 
    else begin
        if (in_dat_done == 1'b1) begin
            if (dat_len_arr_waddr[5:0] >= 6'd36) begin 
                dat_len_arr_waddr[5:0] <= 6'd0;
                dat_len_arr_waddr[6]   <= ~dat_len_arr_waddr[6];
            end 
            else begin 
                dat_len_arr_waddr[5:0] <= dat_len_arr_waddr[5:0] + 1'b1;
            end 
        end 
        else ;
    end 
end 


always @ (posedge clk_main or negedge rst_n) begin 
    if (rst_n == 1'b1) begin
        dat_len_arr_raddr <= 7'd0;
    end 
    else begin
        if (out_dat_done == 1'b1) begin
            if (dat_len_arr_raddr[5:0] >= 6'd36) begin
                dat_len_arr_raddr[5:0] <= 6'd0;
                dat_len_arr_raddr[6]   <= ~dat_len_arr_raddr[6];
            end 
            else begin
                dat_len_arr_raddr[5:0] <= dat_len_arr_raddr[5:0] + 1'b1;
            end 
        end 
        else ;
    end 
end 

always @ (*) begin 
    if (dat_len_arr_raddr[6:0] == dat_len_arr_waddr[6:0]) begin
        dat_len_arr_empty = 1'b1;
    end 
    else begin
        dat_len_arr_empty = 1'b0;
    end 
end 

generate 
    for (i = 0; i < 37; i = i + 1) begin: DAT_LEN_ARR
        always @ (posedge clk_main or negedge rst_n) begin
            if (rst_n == 1'b0) begin
                dat_len_arr[i] <= 6'd0;
            end 
            else begin
                if (dat_len_arr_waddr[5:0]==i && in_dat_done == 1'b1) begin
                    dat_len_arr[i] <= in_dat_vld_len[5:0];
                end 
                else ;
            end 
        end 
    end 
endgenerate

always @ (*) begin
    cur_dat_len[5:0] = dat_len_arr[dat_len_arr_raddr[5:0]];
end 

//*****************************************
//DAT RD FSM
//*****************************************

always @ (posedge clk_main or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        cur_state <= IDLE;
    end 
    else begin
        cur_state <= nxt_state;
    end 
end 

always @ (*) begin
    case (cur_state)
        default: begin
            if (dat_len_arr_empty == 1'b0) begin
                nxt_state = DAT_RD;
            end 
            else begin
                nxt_state = IDLE;
            end 
        end 
        DAT_RD: begin
            if (out_dat_done == 1'b1) begin
                nxt_state = IDLE;
            end 
            else begin
                nxt_state = DAT_RD;
            end 
        end 
    endcase 
end 

always @ (*) begin 
    if (cur_state == DAT_RD) begin 
        out_dat_rd = 1'b1;
    end 
    else begin 
        out_dat_rd = 1'b0;
    end 
end 

always @ (posedge clk_main or negedge rst_n) begin
    if (rst_n == 1'b0) begin 
        out_dat_cnt <= 6'd0;
    end 
    else begin 
        if (out_dat_done == 1'b1) begin 
            out_dat_cnt <= 6'd0;
        end 
        else begin 
            if (out_dat_rd == 1'b1) begin 
                out_dat_cnt <= out_dat_cnt + 1'b1;
            end 
            else ;
        end 
    end 
end 

always @ (*) begin 
    if (out_dat_cnt == cur_dat_len - 1'b1) begin    
        out_dat_done = 1'b1;
    end 
    else begin 
        out_dat_done = 1'b0;
    end 
end 

//*****************************************
//RAM CTRL
//*****************************************

always @ (*) begin 
    if (in_dat_vld == 1'b1) begin 
        if (dat_len_arr_empty == 1'b1 && {in_num, grp_num} == in_dat_max_num) begin
            ram_wen = 1'b0;
        end 
        else begin 
            ram_wen = 1'b1;
        end 
    end 
    else begin
        ram_wen = 1'b0;
    end 
end 

always @ (*) begin 
    ram_waddr = dat_arr_1st_zero_idx;
end 

always @ (*) begin
    ram_ren = out_dat_rd;
end 

always @ (*) begin
    ram_raddr = order_arr[order_arr_raddr];
end 

//*****************************************
//OUT_DAT
//*****************************************

always @ (posedge clk_main or negedge rst_n) begin 
    if (rst_n == 1'b0) begin 
        ram_ren_dly[2:0] <= 3'd0;
    end 
    else begin 
        ram_ren_dly[2:0] <= {ram_ren_dly[1:0], ram_ren};
    end 
end 

always @ (*) begin 
    if ({in_num, grp_num} == in_dat_max_num && pre_dat_pack_num == 6'd0) begin 
        out_vld = 1'b1;
    end 
    else begin 
        if (ram_ren_dly[2] == 1'b1) begin 
            out_vld = 1'b1;
        end 
        else begin 
            out_vld = 1'b0;
        end 
    end 
end 

always @ (*) begin 
    if ({in_num, grp_num} == in_dat_max_num && pre_dat_pack_num == 6'd0) begin 
        out_dat = in_dat;
    end 
    else begin 
        out_dat = ram_rdat;
    end 
end 

endmodule